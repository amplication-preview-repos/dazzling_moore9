/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceRegistrationService } from "../serviceRegistration.service";
import { ServiceRegistrationCreateInput } from "./ServiceRegistrationCreateInput";
import { ServiceRegistration } from "./ServiceRegistration";
import { ServiceRegistrationFindManyArgs } from "./ServiceRegistrationFindManyArgs";
import { ServiceRegistrationWhereUniqueInput } from "./ServiceRegistrationWhereUniqueInput";
import { ServiceRegistrationUpdateInput } from "./ServiceRegistrationUpdateInput";

export class ServiceRegistrationControllerBase {
  constructor(protected readonly service: ServiceRegistrationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceRegistration })
  async createServiceRegistration(
    @common.Body() data: ServiceRegistrationCreateInput
  ): Promise<ServiceRegistration> {
    return await this.service.createServiceRegistration({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceRegistration] })
  @ApiNestedQuery(ServiceRegistrationFindManyArgs)
  async serviceRegistrations(
    @common.Req() request: Request
  ): Promise<ServiceRegistration[]> {
    const args = plainToClass(ServiceRegistrationFindManyArgs, request.query);
    return this.service.serviceRegistrations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceRegistration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serviceRegistration(
    @common.Param() params: ServiceRegistrationWhereUniqueInput
  ): Promise<ServiceRegistration | null> {
    const result = await this.service.serviceRegistration({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceRegistration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServiceRegistration(
    @common.Param() params: ServiceRegistrationWhereUniqueInput,
    @common.Body() data: ServiceRegistrationUpdateInput
  ): Promise<ServiceRegistration | null> {
    try {
      return await this.service.updateServiceRegistration({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceRegistration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServiceRegistration(
    @common.Param() params: ServiceRegistrationWhereUniqueInput
  ): Promise<ServiceRegistration | null> {
    try {
      return await this.service.deleteServiceRegistration({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
